//HintName: EndpointExtensions.g.cs
// <auto-generated>
//   Generated by the IeuanWalker.MinimalApi.Endpoints
//   https://github.com/IeuanWalker/IeuanWalker.MinimalApi.Endpoints
// </auto-generated>

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System.Threading;
using IeuanWalker.MinimalApi.Endpoints.Filters;
using FluentValidation;

namespace TestAssembly;

public static class EndpointExtensions
{
	public static IHostApplicationBuilder AddEndpointsFromTestAssembly(this IHostApplicationBuilder builder)
	{
		builder.Services.AddSingleton<IValidator<global::TestNamespace.CreateRequest>, global::TestNamespace.CreateRequestValidatorA>();
		builder.Services.AddScoped<global::TestNamespace.ValidatorEndpoint>();

		// Validators not directly related to an endpoints request model
		builder.Services.AddSingleton<IValidator<global::TestNamespace.CreateRequest>, global::TestNamespace.CreateRequestValidatorB>();

		return builder;
	}

	public static WebApplication MapEndpointsFromTestAssembly(this WebApplication app)
	{
		// POST: /api/val
		RouteHandlerBuilder post_Val_0 = app
			.MapPost("/api/val", async (
				global::TestNamespace.CreateRequest request,
				[FromServices] global::TestNamespace.ValidatorEndpoint endpoint,
				CancellationToken ct) => await endpoint.Handle(request, ct))
			.WithTags("Val")
			.WithName("post_Val_0")
			.DisableValidation()
			.AddEndpointFilter<FluentValidationFilter<global::TestNamespace.CreateRequest>>()
			.ProducesValidationProblem();

		global::TestNamespace.ValidatorEndpoint.Configure(post_Val_0);

		return app;
	}
}
