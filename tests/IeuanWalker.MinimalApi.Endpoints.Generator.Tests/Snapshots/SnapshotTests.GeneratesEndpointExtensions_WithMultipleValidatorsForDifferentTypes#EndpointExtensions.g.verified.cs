//HintName: EndpointExtensions.g.cs
// <auto-generated>
//   Generated by the IeuanWalker.MinimalApi.Endpoints
//   https://github.com/IeuanWalker/IeuanWalker.MinimalApi.Endpoints
// </auto-generated>

using Microsoft.AspNetCore.Mvc;
using IeuanWalker.MinimalApi.Endpoints.Filters;
using FluentValidation;

namespace TestAssembly;

public static class EndpointExtensions
{
    public static IHostApplicationBuilder AddEndpointsFromTestAssembly(this IHostApplicationBuilder builder)
    {
        builder.Services.AddSingleton<IValidator<global::TestNamespace.CreateUserRequest>, global::TestNamespace.CreateUserRequestValidator>();
        builder.Services.AddScoped<global::TestNamespace.CreateUserEndpoint>();
        builder.Services.AddSingleton<IValidator<global::TestNamespace.UpdateUserRequest>, global::TestNamespace.UpdateUserRequestValidator>();
        builder.Services.AddScoped<global::TestNamespace.UpdateUserEndpoint>();
        
        // Validators not directly related to an endpoints request model
        builder.Services.AddSingleton<IValidator<global::TestNamespace.Address>, global::TestNamespace.AddressValidator>();
        
        return builder;
    }
    
    public static WebApplication MapEndpointsFromTestAssembly(this WebApplication app)
    {
        // POST: /api/users
        RouteHandlerBuilder post_Users_0 = app
            .MapPost("/api/users", async (
                global::TestNamespace.CreateUserRequest request,
                [FromServices] global::TestNamespace.CreateUserEndpoint endpoint,
                CancellationToken ct) => await endpoint.Handle(request, ct))
            .WithTags("Users")
            .WithName("post_Users_0")
            .DisableValidation()
            .AddEndpointFilter<FluentValidationFilter<global::TestNamespace.CreateUserRequest>>()
            .ProducesValidationProblem();
        
        global::TestNamespace.CreateUserEndpoint.Configure(post_Users_0);
        
        // PUT: /api/users/{id}
        RouteHandlerBuilder put_Users_1 = app
            .MapPut("/api/users/{id}", async (
                global::TestNamespace.UpdateUserRequest request,
                [FromServices] global::TestNamespace.UpdateUserEndpoint endpoint,
                CancellationToken ct) => await endpoint.Handle(request, ct))
            .WithTags("Users")
            .WithName("put_Users_1")
            .DisableValidation()
            .AddEndpointFilter<FluentValidationFilter<global::TestNamespace.UpdateUserRequest>>()
            .ProducesValidationProblem();
        
        global::TestNamespace.UpdateUserEndpoint.Configure(put_Users_1);
        
        return app;
    }
}
