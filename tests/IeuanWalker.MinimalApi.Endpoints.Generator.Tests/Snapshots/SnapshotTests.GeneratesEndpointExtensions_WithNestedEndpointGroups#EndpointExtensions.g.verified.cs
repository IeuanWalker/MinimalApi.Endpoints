//HintName: EndpointExtensions.g.cs
// <auto-generated>
//   Generated by the IeuanWalker.MinimalApi.Endpoints
//   https://github.com/IeuanWalker/IeuanWalker.MinimalApi.Endpoints
// </auto-generated>

using Microsoft.AspNetCore.Mvc;

namespace TestAssembly;

public static class EndpointExtensions
{
    public static IHostApplicationBuilder AddEndpointsFromTestAssembly(this IHostApplicationBuilder builder)
    {
        builder.Services.AddScoped<global::TestNamespace.GetUserEndpoint>();
        builder.Services.AddScoped<global::TestNamespace.GetUserV1Endpoint>();
        builder.Services.AddScoped<global::TestNamespace.GetAllUsersEndpoint>();
        
        return builder;
    }
    
    public static WebApplication MapEndpointsFromTestAssembly(this WebApplication app)
    {
        // *************************************
        // GROUP: TestNamespace.ApiEndpointGroup
        // 1 endpoints
        // *************************************
        RouteGroupBuilder group_apiEndpointGroup_0 = TestNamespace.ApiEndpointGroup.Configure(app);
        
        // GET: /api/{id}
        RouteHandlerBuilder get__0 = group_apiEndpointGroup_0
            .MapGet("/{id}", async (
                global::TestNamespace.GetUserRequest request,
                [FromServices] global::TestNamespace.GetUserEndpoint endpoint,
                CancellationToken ct) => await endpoint.Handle(request, ct))
            .WithName("get__0");
        
        global::TestNamespace.GetUserEndpoint.Configure(get__0);
        
        // ************************************
        // GROUP: TestNamespace.V1EndpointGroup
        // 1 endpoints
        // ************************************
        RouteGroupBuilder group_v1EndpointGroup_1 = TestNamespace.V1EndpointGroup.Configure(app);
        
        // GET: /v1/user/{id}
        RouteHandlerBuilder get_User_1 = group_v1EndpointGroup_1
            .MapGet("/user/{id}", async (
                global::TestNamespace.GetUserRequest request,
                [FromServices] global::TestNamespace.GetUserV1Endpoint endpoint,
                CancellationToken ct) => await endpoint.Handle(request, ct))
            .WithName("get_User_1");
        
        global::TestNamespace.GetUserV1Endpoint.Configure(get_User_1);
        
        // ***************************************
        // GROUP: TestNamespace.UsersEndpointGroup
        // 1 endpoints
        // ***************************************
        RouteGroupBuilder group_usersEndpointGroup_2 = TestNamespace.UsersEndpointGroup.Configure(app);
        
        // GET: /users/
        RouteHandlerBuilder get_Users_2 = group_usersEndpointGroup_2
            .MapGet("/", async (
                [FromServices] global::TestNamespace.GetAllUsersEndpoint endpoint,
                CancellationToken ct) => await endpoint.Handle(ct))
            .WithName("get_Users_2");
        
        global::TestNamespace.GetAllUsersEndpoint.Configure(get_Users_2);
        
        return app;
    }
}
